C51 COMPILER V9.60.7.0   USART                                                             09/24/2023 20:34:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USART.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\USA
                    -RT.lst) TABS(2) OBJECT(.\Objects\USART.obj)

line level    source

   1          /*
   2          
   3          SBUF: UART1 uses register SBUF (address:99H) to hold both the received and transmitted data passing throug
             -h pins RxD and TxD.all have two in the chip, one for transmit and the other for receive(OK)
   4          
   5          PCON&SCON:Serial port 1 of STC15 series has two control registers: Serial port control register (SCON) and
             - PCONwhich used to select Baud-Rate
   6          SCON:SM0  SM1  Mode  BaudRate
   7                      0    1     1  (T1 or T2)/4 (OK)
   8                      0    0     0   SYSclk/12
   9          PCON:
  10          B7-SMOD
  11           0 : Disable double Baud rate of the UART(OK)
  12           1 : Enable double Baud rate of the UART in mode 1,2,or 3.
  13          B6-SMOD0
  14           0 : SCON.7 is SM0 function(OK)
  15           1 : SCON.7 is FE function. Note that FE will be set after a frame error regardless of the state of SMOD0.
  16          
  17          AUXR:
  18          B6-T1x12:Timer 1 clock source bit
  19           0 : The clock source of Timer 1 is SYSclk/12. It will compatible to the traditional 8051 MCU
  20           1 : The clock source of Timer 1 is SYSclk/1. It will drive the T0 faster than a traditional 8051 MCUIf T1
             - is used as the baud-rate generator of UART1, T1x12 will decide whether UART1 is 1T or 12T.(OK)
  21          B0 - S1ST2 : the control bit that UART1 select Timer 2 as its baud-rate generator.
  22           0 : Select Timer 1 as the baud-rate generator of UART1(OK)
  23           1 : Select Timer 2 as the baud-rate generator of UART1. Timer 1 is released to use in other functions
  24          
  25          IE:
  26          B7-EA : disables all interrupts.
  27           0 : no interrupt will be acknowledged.
  28           1 : each interrupt source is individually enabled or disabled by setting or clearing its enable bit.(OK)
  29          B4-ES : Serial port 1(UART1) interrupt enable bit.
  30           0 : Serial port 1(UART1) interrupt would be diabled.
  31           1 : Serial port 1(UART1) interrupt would be enabled.(OK)
  32          
  33          Timer1 Configuration：
  34           #define    Timer1_Load(n)    TH1 = (n)/256,TL1 = (n)%256 Use this sentence to set the T1.So we need to ca
             -lculate the buad_rate we need！
  35          
  36          
  37          综合上述的寄存器的配置，我们将选择Timer1来产生USART1的波特率的时钟源，我们选择的Serial Port的模式Mode=1,当
             -数据传输完成时会产生中断，
  38          我们可以通过检查中断向量TI(SCON-B1)的值来判断数据的传输是否完成，完成则为1，未完成则为0：while(TI == 0); -
             --> TI = 0;(不要忘记清零)
  39          
  40          那么波特率的计算如下：Buad_Rate = T1/4
  41          设定的Timer1时钟如下：Time_Clk = SYSclk/1
  42          */
  43          #include "USART.h"
  44          
  45          void UartInit(void) {
  46   1          SCON  = (SCON & 0x3f) | 0x40; //选择usart1的mode为1
  47   1          S1_USE_P30P31();
  48   1          Timer2_1T(); //The clock source of Timer 2 is SYSclk/1.
C51 COMPILER V9.60.7.0   USART                                                             09/24/2023 20:34:44 PAGE 2   

  49   1          Timer2_AsTimer(); // TMOD &= ~(1<<6) 定时器1用做定时器
  50   1          S1_BRT_UseTimer2(); //Select Timer 1 as the baud-rate generator
  51   1          T2L = (65536 - (FOSC/4/BAUD)); //Set the preload value
  52   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
  53   1          EA = 1;
  54   1          ES = 1;
  55   1          Timer2_Run(); // 启动定时器1
  56   1      }
  57          
  58          void SendChar(unsigned char dat) {
  59   1          SBUF = dat;
  60   1          while(!TI);
  61   1          TI = 0;
  62   1      }
  63          
  64          void SendString(char *s) {
  65   1          while (*s)  {
  66   2              SendChar(*s++);
  67   2          }
  68   1      }
  69          
  70          void PrintSerial(const char *format, ...) {
  71   1          int i;
  72   1          char buffer[30]; 
  73   1      
  74   1          va_list args;
  75   1          va_start(args, format);
  76   1      
  77   1          for (i = 0; i < 30; i++) buffer[i] = '\0'; 
  78   1      
  79   1          vsprintf(buffer, format, args);
  80   1          va_end(args);
  81   1          SendString(buffer);
  82   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    150    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      54
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
