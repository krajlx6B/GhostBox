C51 COMPILER V9.60.7.0   RDA5807M                                                          09/24/2023 20:34:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE RDA5807M
OBJECT MODULE PLACED IN .\Objects\RDA5807M.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RDA5807M.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -RDA5807M.lst) TABS(2) OBJECT(.\Objects\RDA5807M.obj)

line level    source

   1          #include "RDA5807M.h"
   2          
   3          unsigned short radioRegisterContent[4];
   4          unsigned char buffer[10];
   5          int volume;
   6          int frequence;
   7          
   8          void radioInit(void){
   9   1        unsigned char radioAddress;
  10   1          
  11   1        UartInit();
  12   1        
  13   1        //Scan for device
  14   1        radioAddress = I2C_Scan();
  15   1        
  16   1        if(radioAddress){
  17   2          reset();
  18   2          delay_ms(100);
  19   2        
  20   2          readRegisters();
  21   2      
  22   2          PrintSerial("Radio found at 0x%02x\n", radioAddress);
  23   2          PrintSerial("Loading defaults...\n");
  24   2      
  25   2          radioRegisterContent[0] = 0xD001;         //Power up and set Audio output, Mute and Bass boost
  26   2          radioRegisterContent[2] = RADIO_REG_R4_EM50;  //Set de emphasis
  27   2          writeRegisters();
  28   2          setVolume(RADIO_DEFAULT_VOL);           //Set default volume
  29   2          setFreq(RADIO_DEFAULT_FRQ);           //Set default freq
  30   2      
  31   2        } else PrintSerial("Device not found\n" );
  32   1      }
  33          
  34          unsigned short readRegisterRan(unsigned char regAddress){
  35   1        unsigned short dat;
  36   1        unsigned char highByte;
  37   1        unsigned char lowByte;
  38   1        
  39   1        I2C_Start();
  40   1        I2C_WriteByte(RND_WriteAdr);
  41   1        I2C_WriteByte(regAddress);
  42   1        I2C_Start();
  43   1        I2C_WriteByte(RND_ReadAdr);
  44   1        highByte = I2C_ReadByte();
  45   1        I2C_send_ack();
  46   1        lowByte = I2C_ReadByte();
  47   1        I2C_send_nack();
  48   1        I2C_Stop();
  49   1      
  50   1        dat = (highByte << 8) + lowByte;
  51   1        
  52   1        return dat;
  53   1      }
  54          
C51 COMPILER V9.60.7.0   RDA5807M                                                          09/24/2023 20:34:43 PAGE 2   

  55          void writeRegisterRan(unsigned char regAddress, unsigned short dat){
  56   1        unsigned char highByte;
  57   1        unsigned char lowByte;
  58   1          
  59   1        highByte = (dat >>8 ) & 0xFF;
  60   1        lowByte = dat & 0xFF;
  61   1        
  62   1        I2C_Start();
  63   1        I2C_WriteByte(RND_WriteAdr);
  64   1        I2C_WriteByte(regAddress);
  65   1        I2C_WriteByte(highByte);
  66   1        I2C_WriteByte(lowByte);
  67   1        I2C_Stop();
  68   1      }
  69          
  70          void readRegisters(void){
  71   1        radioRegisterContent[0] = readRegisterRan(Reg02Address);
  72   1        radioRegisterContent[1] = readRegisterRan(Reg03Address);
  73   1        radioRegisterContent[2] = readRegisterRan(Reg04Address);
  74   1        radioRegisterContent[3] = readRegisterRan(Reg05Address);  
  75   1      }
  76          
  77          void writeRegisters(void){
  78   1        writeRegisterRan(Reg02Address,radioRegisterContent[0]);
  79   1        writeRegisterRan(Reg03Address,radioRegisterContent[1]);
  80   1        writeRegisterRan(Reg04Address,radioRegisterContent[2]);
  81   1        writeRegisterRan(Reg05Address,radioRegisterContent[3]);
  82   1        readRegisters();
  83   1      }
  84          
  85          void reset(void){
  86   1        radioRegisterContent[0] |= RADIO_REG_CTRL_RESET;
  87   1        writeRegisters();
  88   1      }
  89          
  90          void setFreq(unsigned short freq) {
  91   1        unsigned short newChan;
  92   1        
  93   1        newChan = (freq - 8700) / 10;
  94   1        newChan = newChan << 6;
  95   1        newChan += 0x0010; //Add the tune bit to 1
  96   1        radioRegisterContent[1] = newChan;
  97   1        writeRegisters();
  98   1        PrintSerial("Station %i\n", getFreq());
  99   1      }
 100          
 101          unsigned short getFreq(void) {
 102   1        unsigned short chan;
 103   1        unsigned short freq;
 104   1      
 105   1        readRegisters();
 106   1      
 107   1        chan = radioRegisterContent[1];
 108   1        chan = chan >> 6;
 109   1        freq = chan*10 + 8700;
 110   1        return (freq);
 111   1      }
 112          
 113          void seekUp(void) {
 114   1        radioRegisterContent[0] |= RADIO_REG_CTRL_SEEKUP;
 115   1          radioRegisterContent[0] |= RADIO_REG_CTRL_SEEK;
 116   1        writeRegisters();
C51 COMPILER V9.60.7.0   RDA5807M                                                          09/24/2023 20:34:43 PAGE 3   

 117   1        radioRegisterContent[0] &= RDA_REG_SEEK_STOP;
 118   1      }
 119          
 120          void seekDown(void){
 121   1        radioRegisterContent[0] &= (~RADIO_REG_CTRL_SEEKUP);
 122   1          radioRegisterContent[0] |= RADIO_REG_CTRL_SEEK;
 123   1        writeRegisters();
 124   1        radioRegisterContent[0] &= RDA_REG_SEEK_STOP;
 125   1      }
 126          
 127          void setVolume(unsigned short vol){
 128   1        radioRegisterContent[3] &=~(RADIO_REG_VOL_VOL);
 129   1        radioRegisterContent[3] |= vol;
 130   1        writeRegisters();
 131   1      }
 132          
 133          unsigned short getVolume(void) {
 134   1        unsigned short vol;
 135   1      
 136   1        readRegisters();
 137   1        vol = radioRegisterContent[3] & 0x000F;
 138   1        return (vol);
 139   1      }
 140          
 141          void setVolumeUp(void) {
 142   1        unsigned short vol;
 143   1      
 144   1        vol = getVolume();
 145   1        if(vol < 16) setVolume(vol +1);
 146   1      }
 147          
 148          void setVolumeDown(void){
 149   1        unsigned short vol;
 150   1      
 151   1        vol = getVolume();
 152   1        if(vol > 0) setVolume(vol -1);
 153   1      }
 154          
 155          void ghostSeek(void) {
 156   1        unsigned short freq;
 157   1        
 158   1        freq = getFreq();
 159   1        if(freq == 10800) freq = 8700;
 160   1        else freq = freq + 10;
 161   1        setFreq(freq);
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    464    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
